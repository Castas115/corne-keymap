/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        kp_sl: kp_sl {
            compatible = "zmk,behavior-hold-tap";
            label = "KP_SL";
            bindings = <&kp>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        lt_sl: lt_sl {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_SL";
            bindings = <&lt>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    combos {
        compatible = "zmk,combos";

        accent_a_combo {
            bindings = <&accent_a_macro>;
            key-positions = <20 13>;
        };

        Ctrl-Gui {
            bindings = <&sk LC(LEFT_GUI)>;
            key-positions = <37 36>;
        };

        Ctrl-Shift {
            bindings = <&sk LS(LCTRL)>;
            key-positions = <36 38>;
        };

        Gui-Shift {
            bindings = <&sk LS(LEFT_GUI)>;
            key-positions = <37 38>;
        };
    };

    macros {
        accent_a_macro: accent_a_macro {
            compatible = "zmk,behavior-macro";
            label = "new_macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT &kp RSHFT>,
                <&macro_tap>,
                <&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N5>,
                <&macro_release>,
                <&kp RSHFT &kp RALT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q  &kp W  &kp E             &kp R              &kp T                   &kp Y             &kp U       &kp I       &kp O    &kp P     &none
&none  &kp A  &kp S  &kp D             &kp F              &kp G                   &kp H             &kp J       &kp K       &kp L    &kp SEMI  &none
&none  &kp Z  &kp X  &kp C             &kp V              &kp B                   &kp N             &kp M       &kp COMMA   &kp DOT  &kp FSLH  &none
                     &kp LEFT_CONTROL  &kp_sl LEFT_GUI 1  &mt LEFT_SHIFT SPACE    &mt SPACE RSHIFT  &lt_sl 2 3  &lt_sl 4 4
            >;
        };

        alt {
            bindings = <
&trans  &kp LA(Q)  &kp LA(W)  &kp LA(E)         &kp LA(R)          &kp LA(T)               &kp LA(Y)  &kp LA(U)  &kp LA(I)  &kp LA(O)      &kp LA(P)          &trans
&trans  &kp LA(A)  &kp LA(S)  &kp LA(D)         &kp LA(F)          &kp LA(G)               &kp LA(H)  &kp LA(J)  &kp LA(K)  &kp LA(L)      &kp LA(SEMICOLON)  &trans
&trans  &kp LA(Z)  &kp LA(X)  &kp LA(C)         &kp LA(V)          &kp LA(V)               &kp LA(B)  &kp LA(N)  &kp LA(M)  &kp LA(COMMA)  &kp LA(DOT)        &trans
                              &kp LEFT_CONTROL  &kp_sl LEFT_GUI 1  &mt LEFT_SHIFT SPACE    &kp RET    &trans     &kp RALT
            >;
        };

        nav {
            bindings = <
&none  &kp F11  &kp F12  &kp F13   &kp F14            &kp F15                 &kp C_VOLUME_UP  &kp C_VOL_DN  &kp C_BRI_UP  &kp C_BRI_DN     &kp INS     &none
&none  &kp F6   &kp F7   &kp F8    &kp F9             &kp F10                 &kp LEFT_ARROW   &kp DOWN      &kp UP_ARROW  &kp RIGHT_ARROW  &kp DELETE  &none
&none  &kp F1   &kp F2   &kp F3    &kp F4             &kp F5                  &kp LC(HOME)     &kp END       &kp PG_DN     &kp PG_UP        &kp FSLH    &none
                         &kp LGUI  &kp_sl LEFT_GUI 1  &mt LEFT_SHIFT SPACE    &kp RET          &trans        &trans
            >;
        };

        icons {
            bindings = <
&none  &kp Q             &kp W              &kp E             &kp R              &kp T                   &kp EXCL     &kp PERCENT  &kp SINGLE_QUOTE   &kp AMPERSAND         &kp ASTERISK     &none
&none  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp TILDE         &kp EQUAL          &kp G                   &kp AT_SIGN  &kp EQUAL    &kp DOUBLE_QUOTES  &kp LEFT_BRACE        &kp RIGHT_BRACE  &none
&none  &kp LESS_THAN     &kp GREATER_THAN   &kp TILDE         &kp GRAVE          &kp B                   &kp CARET    &kp DOLLAR   &kp MINUS          &kp LEFT_PARENTHESIS  &kp RPAR         &none
                                            &kp LEFT_CONTROL  &kp_sl LEFT_GUI 1  &mt LEFT_SHIFT SPACE    &kp RET      &mo 0        &kp RALT
            >;
        };

        numpad {
            bindings = <
&none  &kp F11  &kp F12  &kp F13           &kp F14            &kp F15                 &kp PLUS          &kp MINUS  &kp N7  &kp N8  &kp N9  &none
&none  &kp F6   &kp F7   &kp F8            &kp F9             &kp F10                 &kp SLASH         &kp EQUAL  &kp N4  &kp N5  &kp N6  &none
&none  &kp F1   &kp F2   &kp F3            &kp F4             &kp F5                  &kp LC(ASTERISK)  &kp N0     &kp N1  &kp N2  &kp N3  &none
                         &kp LEFT_CONTROL  &kp_sl LEFT_GUI 1  &mt LEFT_SHIFT SPACE    &kp RET           &mo 0      &trans
            >;
        };
    };
};
